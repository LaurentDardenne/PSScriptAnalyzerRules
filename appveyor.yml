# clone directory
clone_folder: c:\projects\PSScriptAnalyzerRules
#ParameterSetRules

clone_depth: 0

install:
  - ps: | 
        Install-PackageProvider Nuget -ForceBootstrap -Force
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module Pester -Force
        Install-Module PsScriptAnalyzer -force
        Install-Module Psake  -force

        #Register-PSRepository -Name PoshBuildTools -SourceLocation https://ci.appveyor.com/nuget/poshbuildtools
        #Install-Module PoshBuildTools -Scope CurrentUser -Force
        
        $ModulePath='c:\projects\Modules'
        Md "$ModulePath\DTW.PS.FileSystem" > $null
        
        $source = 'http://www.dtwconsulting.com/PS/Downloads/DTW.PS.FileSystem.zip'
        $destination = "$ModulePath\DTW.PS.FileSystem.zip"
         Invoke-WebRequest $source -OutFile $destination
         Expand-Archive -Path $destination  -DestinationPath $ModulePath
        
        $source = 'http://relevantcodes.com/Tools/ReportUnit/reportunit-1.2.zip'
        $destination = "$ModulePath\reportunit.zip"
         Invoke-WebRequest $source -OutFile $destination
         Expand-Archive -Path $destination  -DestinationPath $ModulePath
        
        $env:PSModulePath +=";$ModulePath"


build_script:
  - ps: |
        . "$env:APPVEYOR_BUILD_FOLDER\Tools\PSScriptAnalyzerRules_ProjectProfile.ps1"
        Import-Module Psake
        . "$PSScriptAnalyzerRulesVcs\Tools\Build.ps1" -Release

# Set-ItemProperty is a workaround :
# A command that prompts the user failed because the host program or the command type does not support user interaction.
test_script:
  - ps: |

        Set-ItemProperty -Name DisablePromptToUpdateHelp -Value 1 -path 'HKLM:\SOFTWARE\Microsoft\PowerShell' 
        Import-Module PSScriptAnalyzer
        Add-AppveyorTest -Name "PsScriptAnalyzer" -Outcome Running
        $Params=@{
          Path="$PSScriptAnalyzerRulesDelivery\ParameterSetRules.psm1"
          CustomRulePath="$PSScriptAnalyzerRulesDelivery\ParameterSetRules.psm1" 
          #Severity='Error'
          #ErrorAction='SilentlyContinue'
        }
        $Results = Invoke-ScriptAnalyzer @Params
        If ($Results) {
          $ResultString = $Results | Out-String
          Write-Warning $ResultString
          Add-AppveyorMessage -Message "PSScriptAnalyzer output contained one or more result(s) with 'Error' severity.`
          Check the 'Tests' tab of this build for more details." -Category Error
          Update-AppveyorTest -Name "PsScriptAnalyzer" -Outcome Failed -ErrorMessage $ResultString
           
          # Failing the build
          Throw "Build failed"
        }
        Else {
          Update-AppveyorTest -Name "PsScriptAnalyzer" -Outcome Passed
        }
        
        cd "$env:APPVEYOR_BUILD_FOLDER\Modules\ParameterSetRules\Test"
        $ResultsFile="$env:Temp\PSScriptAnalyzerRulesPester.xml"
        $Results = Invoke-Pester  -OutputFormat NUnitXml -OutputFile $ResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", $ResultsFile)
        
        $ReportFile="$env:Temp\ParameterSetRules-TestsReport.html"
        &"$ModulePath\ReportUnit\ReportUnit.exe" $ResultsFile $ReportFile
        Push-AppveyorArtifact $ReportFile
        if ($Results.FailedCount -gt 0) { 
            throw "$($ruleTestResults.FailedCount) tests failed."
        }

# Upload the project as a zip archive
on_finish:
  - ps: |
        Add-AppveyorTest -Name "Finish" -Outcome Running
        $zipFile = "$env:Temp\PSScriptAnalyzerRules.zip"
        Push-AppveyorArtifact $zipFile
