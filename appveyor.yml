# clone directory
clone_folder: c:\projects\PSScriptAnalyzerRules
#ParameterSetRules

clone_depth: 0

environment:
  MyGetApiKey:
    secure: irzUE0TW1t0PaM/FtieoJK1Uq/7ZXUw4qEUea1wX7LpwXRx1xeUTXEo4spxBVN6c

install:
  - ps: | 
        . "$env:APPVEYOR_BUILD_FOLDER\Tools\PSScriptAnalyzerRules_ProjectProfile.ps1"
        Install-PackageProvider Nuget -ForceBootstrap -Force
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
  
        Install-module PowershellGet -MinimumVersion 1.1.0.0 -Force
         Remove-module PowershellGet
         Remove-module PackageManagement  
        Import-Module PowershellGet 
               
        Install-Module Psake -force
        Import-Module Psake
        . "$PSScriptAnalyzerRulesVcs\Tools\Install.ps1"

nuget:
  account_feed: true
  project_feed: true

build_script:
  - ps: |
        Import-Module Psake
        . "$PSScriptAnalyzerRulesVcs\Tools\Build.ps1" -Release

# Set-ItemProperty is a workaround :
# A command that prompts the user failed because the host program or the command type does not support user interaction.
test_script:
  - ps: |

        Set-ItemProperty -Name DisablePromptToUpdateHelp -Value 1 -path 'HKLM:\SOFTWARE\Microsoft\PowerShell' 
        Import-Module PSScriptAnalyzer
        Add-AppveyorTest -Name "PsScriptAnalyzer" -Outcome Running
        $Params=@{
          Path="$PSScriptAnalyzerRulesDelivery\ParameterSetRules.psm1"
          CustomRulePath="$PSScriptAnalyzerRulesDelivery\ParameterSetRules.psm1" 
          #Severity='Error'
          #ErrorAction='SilentlyContinue'
        }
        $Results = Invoke-ScriptAnalyzer @Params
        If ($Results) {
          $ResultString = $Results | Out-String
          Write-Warning $ResultString
          Add-AppveyorMessage -Message "PSScriptAnalyzer output contained one or more result(s) with 'Error' severity.`
          Check the 'Tests' tab of this build for more details." -Category Error
          Update-AppveyorTest -Name "PsScriptAnalyzer" -Outcome Failed -ErrorMessage $ResultString
           
          # Failing the build
          Throw "Build failed"
        }
        Else {
          Update-AppveyorTest -Name "PsScriptAnalyzer" -Outcome Passed
        }
        
        cd "$env:APPVEYOR_BUILD_FOLDER\Modules\ParameterSetRules\Test"
        $ResultsFile="$env:Temp\PSScriptAnalyzerRulesPester.xml"
        $Results = Invoke-Pester  -OutputFormat NUnitXml -OutputFile $ResultsFile -PassThru
        $ReportFile="$env:Temp\ParameterSetRules-TestsReport.html"
        &"$Env:Temp\ReportUnit.1.2.1\tools\ReportUnit.exe" $ResultsFile $ReportFile
        Push-AppveyorArtifact $ReportFile
        if ($Results.FailedCount -gt 0) { 
            throw "$($ruleTestResults.FailedCount) tests failed."
        }

# Upload the project as a zip archive
on_finish:
  - ps: |
        Add-AppveyorTest -Name "Finish" -Outcome Running
        $zipFile = "$env:Temp\PSScriptAnalyzerRules.zip"
        Push-AppveyorArtifact $zipFile
        #todo push Delivry to MyGet $MyGetApiKey
